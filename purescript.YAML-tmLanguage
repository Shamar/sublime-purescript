# [PackageDev] target_format: plist, ext: tmLanguage
---
name: PureScript
scopeName: source.purescript
fileTypes: [purs]
uuid: a2569d0d-e592-4873-9488-e0b8d894ac3e

patterns:
- name: meta.section.module.purescript
  begin: ^\s*\b(module)\b
  end: \b(where)\b
  captures:
    "1":
      name: keyword.other.purescript
  patterns:
  - include: '#module-name'

- name: meta.declaration.import.purescript
  begin: \b(import)\b
  end: $
  beginCaptures:
    "1":
      name: keyword.other.purescript
  patterns:
  - include: '#module-name'

- name: meta.declaration.type.purescript
  begin: ^\s*\b(type)\b
  end: $
  beginCaptures:
    "1":
      name: keyword.other.purescript
  patterns:
  - include: '#type-simple'

- name: meta.declaration.typeclass.purescript
  begin: ^\s*\b(class)\b
  end: \b(where)\b|$
  captures:
    "1":
      name: keyword.other.purescript
  patterns:
  - name: entity.other.inherited-class.purescript
    match: ([A-Z][\w.']*)
  - include: '#prelude-typeclass'
  - include: '#generic-tyvar'

- name: meta.declaration.instance.purescript
  begin: ^\s*\b(instance)\b
  end: \b(where)\b|$
  captures:
    "1":
      name: keyword.other.purescript
  patterns:
  - include: '#type-signature'

- name: meta.declaration.function.purescript
  begin: "^\\s*(\\w+|\\(.+\\))\\s*(::)"
  end: $
  beginCaptures:
    "1":
      name: entity.name.function.purescript
    "2":
      name: keyword.operator.has-type.purescript
  patterns:
  - include: '#type-signature'

- name: meta.declaration.ffi.function.purescript
  begin: \s*(foreign)\s+(import)\s+(.+?)\s+
  end: \s*(::)(.+?)
  beginCaptures:
    "1":
      name: keyword.other.purescript
    "2":
      name: keyword.other.purescript
    "3":
      name: entity.name.function.ffi.purescript
  endCaptures:
    "1":
      name: substringkeyword.operator.purescript
  patterns:
    - include: '#ffi'

- include: '#comments'
- include: '#reserveds'
- include: '#constants'
- include: '#strings'
- include: '#prelude'
- include: '#data-ctor'

repository:
  comments:
    patterns:
    - name: comment.line.purescript
      match: \-\-.*
    - name: comment.block.purescript
      begin: \{\-
      end: \-\}

  constants:
    name: constant.language.purescript
    match: \b(true|false)\b

  data-ctor:
    name: constant.other.purescript
    match: \b([A-Z]\w*)\b

  decl-ctor:
    match: \s*([A-Z][\w\.]*?)\s+([A-Z][\w\.]*)\s*
    captures:
      "1":
        name: storage.type.purescript
      "2":
        name: constant.other.purescript

  ffi:
    patterns:
    - begin: "\""
      end: "\""
      patterns:
      - include: source.js

  generic-tyvar:
    name: variable.other.purescript
    match: \b([a-z][\w']*)\b

  module-name:
    name: support.other.module.purescript
    match: ([A-Za-z][\w\.']*)

  prelude:
    patterns:
    - include: '#prelude-data'
    - include: '#prelude-function'
    - include: '#prelude-op'
    - include: '#prelude-type'
    - include: '#prelude-typeclass'

  prelude-data:
    name: support.function.data-ctor.prelude.purescript
    match: \b(Just|Left|Nothing|Right)\b

  prelude-function:
    patterns:
    - name: support.function.prelude.purescript
      match: \b(const|flip)\b
    - include: '#prelude-function-alternative'
    - include: '#prelude-function-applicative'
    - include: '#prelude-function-bits'
    - include: '#prelude-function-boollike'
    - include: '#prelude-function-category'
    - include: '#prelude-function-monad'
    - include: '#prelude-function-num'
    - include: '#prelude-function-ord'
    - include: '#prelude-function-read'
    - include: '#prelude-function-ref'
    - include: '#prelude-function-show'

  prelude-function-alternative:
    name: support.function.prelude.alternative.purescript
    match: \b(empty)\b

  prelude-function-applicative:
    name: support.function.prelude.applicative.purescript
    match: \b(pure)\b

  prelude-function-bits:
    name: support.function.prelude.bits.purescript
    match: \b(complement|shl|shr|numAnd|numComplement|numOr|numShl|numShr|numXor|numZshr|zshr)\b

  prelude-function-boollike:
    name: support.function.prelude.boollike.purescript
    match: \b(boolAnd|boolNot|boolOr|not)\b

  prelude-function-category:
    name: support.function.prelude.category.purescript
    match: \b(id)\b

  prelude-function-monad:
    name: support.function.prelude.monad.purescript
    match: \b(return)\b

  prelude-function-num:
    name: support.function.prelude.num.purescript
    match: \b(negate|numAdd|numDiv|numMod|numMul|numNegate|numSub)\b

  prelude-function-ord:
    name: support.function.prelude.ord.purescript
    match: \b(numLess|numLessEq|numGreater|numGreaterEq)\b

  prelude-function-read:
    name: support.function.prelude.read.purescript
    match: \b(read|readNumber)\b

  prelude-function-ref:
    name: support.function.prelude.ref.purescript
    match: \b(liftRef|refEq|refIneq|unsafeRefEq|unsafeRefIneq)\b

  prelude-function-show:
    name: support.function.prelude.show.purescript
    match: \b(show|showNumber)\b

  prelude-op:
    patterns:
    - name: support.type.op.prelude.purescript
      match: (\$|#)
    - include: '#prelude-op-alternative'
    - include: '#prelude-op-applicative'
    - include: '#prelude-op-bits'
    - include: '#prelude-op-boollike'
    - include: '#prelude-op-category'
    - include: '#prelude-op-eq'
    - include: '#prelude-op-functor'
    - include: '#prelude-op-monad'
    - include: '#prelude-op-num'
    - include: '#prelude-op-ord'

  prelude-op-alternative:
    name: support.type.op.prelude.alternative.purescript
    match: (<\|>)

  prelude-op-applicative:
    name: support.type.op.prelude.applicative.purescript
    match: (<\*>)

  prelude-op-bits:
    name: support.type.op.prelude.bits.purescript
    match: (&|\||\^)

  prelude-op-boollike:
    name: support.type.op.prelude.boollike.purescript
    match: (&&|\|\||\^)

  prelude-op-category:
    name: support.type.op.prelude.category.purescript
    match: (<<<|>>>)

  prelude-op-eq:
    name: support.type.op.prelude.eq.purescript
    match: (==|/=)

  prelude-op-functor:
    name: support.type.op.prelude.functor.purescript
    match: (<\$>)

  prelude-op-monad:
    name: support.type.op.prelude.monad.purescript
    match: (>>=)

  prelude-op-num:
    name: support.type.op.prelude.num.purescript
    match: (\+|\-|\*|/|%)

  prelude-op-ord:
    name: support.type.op.prelude.ord.purescript
    match: (<|<=|>|>=)

  prelude-type:
    name: support.type.prelude.purescript
    match: \b(Boolean|Number|String)\b

  prelude-typeclass:
    name: storage.type.prelude.purescript
    match: \b(Alternative|Applicative|Bits|BoolLike|Category|Either|Eq|Functor|Maybe|Monad|Num|Ord|Read|Show)\b

  reserveds:
    patterns:
    - name: keyword.control.purescript
      match: \b(case|do|else|if|in|let|of|then|until)\b
    - name: keyword.other.purescript
      match: \b(class|data|forall|foreign|import|infixl|infixr|instance|module|type|where)\b
    - name: keyword.operator.purescript
      match: =>|\->|=|\.|\\

  strings:
    patterns:
    - name: invalid-strings
      match: \s+((')'?('))
      captures:
        "1":
          name: invalid.illegal.string.purescript
    - name: string.quoted.single.purescript
      match: (')(.|(\\.))(')
      captures:
        "1":
          name: punctuation.definition.string.begin.purescript
        "3":
          name: constant.character.escape.purescript
        "4":
          name: punctuation.definition.string.begin.purescript
    - name: string.quoted.double.purescript
      match: (\").*(\")
      captures:
        "1":
          name: punctuation.definition.string.begin.purescript
        "2":
          name: punctuation.definition.string.begin.purescript

  type-entailment:
    patterns:
    - name: meta.entailment.purescript
      match: \s*([A-Z][\w.']*)\s+([a-z][\w.']*)\s*(=>)
      captures:
        "1":
          name: entity.other.inherited-class.purescript
        "2":
          name: variable.other.purescript
        "3":
          name: keyword.operator.purescript
        "4":
          name: storage.type.purescript
    - name: meta.entailment.purescript
      begin: (?=.*=>)\(
      end: \)\s*(=>)
      endCaptures:
        "1":
          name: keyword.operator.purescript
      patterns:
      - match: \s*([A-Z][\w.']*)\s+([a-z][\w.']*)\s*
        captures:
          "1":
            name: entity.other.inherited-class.purescript
          "2":
            name: variable.other.purescript

  type-signature:
    patterns:
    - include: '#type-simple'
    - include: '#type-entailment'

  type-simple:
    patterns:
    - name: arrow.operator.purescript
      match: \((->)\)|(->)
      captures:
        "1":
          name: keyword.operator.purescript
        "2":
          name: keyword.operator.purescript
    - name: storage.type.purescript
      match: ([A-Z][\w.']*)
    - include: '#generic-tyvar'
