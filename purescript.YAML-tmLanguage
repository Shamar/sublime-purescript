# [PackageDev] target_format: plist, ext: tmLanguage
---
name: PureScript
scopeName: source.purescript
fileTypes: [purs]
uuid: a2569d0d-e592-4873-9488-e0b8d894ac3e

patterns:
- name: meta.section.module.purescript
  begin: ^\s*\b(module)\b
  end: \b(where)\b
  captures:
    "1":
      name: keyword.other.purescript
  patterns:
  - include: '#module-name'

- name: meta.declaration.import.purescript
  begin: \b(import)\b
  end: $
  beginCaptures:
    "1":
      name: keyword.other.purescript
  patterns:
  - include: '#module-name'

- name: meta.declaration.type.purescript
  begin: ^\s*\b(type)\b
  end: $
  beginCaptures:
    "1":
      name: keyword.other.purescript
  patterns:
  - include: '#type-simple'

- name: meta.declaration.typeclass.purescript
  begin: ^\s*\b(class)\b
  end: \b(where)\b|$
  captures:
    "1":
      name: keyword.other.purescript
  patterns:
  - name: entity.other.inherited-class.purescript
    match: ([A-Z][\w.']*)
  - include: '#prelude-typeclass'
  - include: '#generic-tyvar'

- name: meta.declaration.instance.purescript
  begin: ^\s*\b(instance)\b
  end: \b(where)\b|$
  captures:
    "1":
      name: keyword.other.purescript
  patterns:
  - include: '#type-signature'

- include: '#import'
- include: '#reserveds'
- include: '#constants'
- include: '#strings'
- include: '#function'
- include: '#ffi'
- include: '#prelude'
- include: '#data-ctor'
- include: '#comments'

repository:
  comments:
    patterns:
    - name: comment.line.purescript
      match: \-\-.*
    - name: comment.block.purescript
      begin: \{\-
      end: \-\}

  constants:
    name: constant.language.purescript
    match: \b(true|false)\b

  data-ctor:
    name: constant.other.purescript
    match: \b([A-Z]\w*)\b

  decl-ctor:
    match: \s*([A-Z][\w\.]*?)\s+([A-Z][\w\.]*)\s*
    captures:
      "1":
        name: storage.type.purescript
      "2":
        name: constant.other.purescript

  entailed:
    match: \s*\(?.+?\)?\s+=>\s*([A-Z][\w\.]*?)\s+([A-Z][\w\.]*)\s*

  ffi:
    name: meta.function.ffi.purescript
    begin: \s*(foreign)\s+(import)\s+(.+?)\s+\"
    end: \"\s*(::)(.+?)
    beginCaptures:
      "1":
        name: keyword.other.purescript
      "2":
        name: keyword.other.purescript
      "3":
        name: entity.name.function.ffi.purescript
    endCaptures:
      "1":
        name: keyword.operator.purescript
    patterns:
      - include: source.js

  function:
    name: function.purescript
    match: "^\\s*(\\w+|\\(.+\\))\\s*(::).*$"
    captures:
      "1":
        name: entity.name.function.purescript
      "2":
        name: keyword.operator.purescript

  generic-tyvar:
    name: variable.other.purescript
    match: \b([a-z][\w']*)\b

  module-name:
    name: support.other.module.purescript
    match: ([A-Za-z][\w\.']*)

  prelude:
    patterns:
    - name: support.function.prelude.purescript
      match: \b(const|id|flip|liftRef|pure|read|refEq|refIneq|return|show)\b
    - name: support.function.data-ctor.prelude.purescript
      match: \b(Just|Left|Nothing|Right)\b
    - name: support.type.purescript
      match: (#|\$|<(\$|\*|\|)>|>>=|>>>|<<<)
    - include: '#prelude-type'
    - include: '#prelude-typeclass'

  prelude-type:
    name: support.type.prelude.purescript
    match: \b(Boolean|Number|String)\b

  prelude-typeclass:
    name: storage.type.prelude.purescript
    match: \b(Alternative|Applicative|Bits|BoolLike|Category|Either|Eq|Functor|Maybe|Monad|Num|Ord|Read|Show)\b

  reserveds:
    patterns:
    - name: keyword.control.purescript
      match: \b(case|do|else|if|in|let|of|then|until)\b
    - name: keyword.other.purescript
      match: \b(class|data|forall|foreign|import|infixl|infixr|instance|module|type|where)\b
    - name: keyword.operator.purescript
      match: =>|\->|=|\.|\\

  strings:
    patterns:
    - name: invalid-strings
      match: \s+((')'?('))
      captures:
        "1":
          name: invalid.illegal.string.purescript
    - name: string.quoted.single.purescript
      match: (')(.|(\\.))(')
      captures:
        "1":
          name: punctuation.definition.string.begin.purescript
        "3":
          name: constant.character.escape.purescript
        "4":
          name: punctuation.definition.string.begin.purescript
    - name: string.quoted.double.purescript
      match: (\").*(\")
      captures:
        "1":
          name: punctuation.definition.string.begin.purescript
        "2":
          name: punctuation.definition.string.begin.purescript

  type-entailment:
    patterns:
    - name: meta.entailment.purescript
      match: \s*([A-Z][\w.']*)\s+([a-z][\w.']*)\s*(=>)
      captures:
        "1":
          name: entity.other.inherited-class.purescript
        "2":
          name: variable.other.purescript
        "3":
          name: keyword.operator.purescript
        "4":
          name: storage.type.purescript
    - name: meta.entailment.purescript
      begin: (?=.*=>)\(
      end: \)\s*(=>)
      endCaptures:
        "1":
          name: keyword.operator.purescript
      patterns:
      - match: \s*([A-Z][\w.']*)\s+([a-z][\w.']*)\s*
        captures:
          "1":
            name: entity.other.inherited-class.purescript
          "2":
            name: variable.other.purescript

  type-signature:
    patterns:
    - include: '#type-simple'
    - include: '#type-entailment'

  type-simple:
    patterns:
    - name: arrow.operator.purescript
      match: \((->)\)|(->)
      captures:
        "1":
          name: keyword.operator.purescript
        "2":
          name: keyword.operator.purescript
    - name: storage.type.purescript
      match: ([A-Z][\w.']*)
    - include: '#generic-tyvar'
